#include <iostream>
#include <vector>
#include <algorithm>

class Book {
public:
    std::string title;
    std::string author;
    int id;

    Book(const std::string& t, const std::string& a, int i) : title(t), author(a), id(i) {}
};

class Library {
private:
    std::vector<Book> books;

public:
    void addBook(const Book& book) {
        books.push_back(book);
    }

    void displayBooks() {
        std::cout << "Library Books:\n";
        for (const auto& book : books) {
            std::cout << "ID: " << book.id << "\tTitle: " << book.title << "\tAuthor: " << book.author << "\n";
        }
        std::cout << "\n";
    }

    bool borrowBook(int bookId) {
        auto it = std::find_if(books.begin(), books.end(), [bookId](const Book& book) {
            return book.id == bookId;
        });

        if (it != books.end()) {
            books.erase(it);
            return true;
        } else {
            return false;
        }
    }
};

int main() {
    Library library;

    // Adding some initial books
    library.addBook(Book("The Catcher in the Rye", "J.D. Salinger", 1));
    library.addBook(Book("To Kill a Mockingbird", "Harper Lee", 2));
    library.addBook(Book("1984", "George Orwell", 3));

    int choice;
    do {
        std::cout << "Library Management System\n";
        std::cout << "1. Display Books\n";
        std::cout << "2. Borrow a Book\n";
        std::cout << "3. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                library.displayBooks();
                break;
            case 2: {
                int bookId;
                std::cout << "Enter the ID of the book you want to borrow: ";
                std::cin >> bookId;
                if (library.borrowBook(bookId)) {
                    std::cout << "Book borrowed successfully!\n";
                } else {
                    std::cout << "Book not found or already borrowed.\n";
                }
                break;
            }
            case 3:
                std::cout << "Exiting the program.\n";
                break;
            default:
                std::cout << "Invalid choice. Please try again.\n";
                break;
        }
    } while (choice != 3);

    return 0;
}
